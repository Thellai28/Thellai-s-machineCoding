QUESTIONS :

This is called as complex coding round in which are given with a train ticket reservation problem in which extra feature
enhancement is given one after another.

first simple reservation for 50 seats from A to F.
After stations are added in middle like B, C, D, E. Where people can board any station and get down at any station
assuming train is going from A to F. Then Waiting list are to be added after 50 seats reserved and if any reserved seat
is cancelled we have to check the waiting list and need to confirm the seat if possible.After which we need to print
the details of the PNR details.

-----------------------------------------------------------------------------------------------------------------
TIPS :
    1. Use the access modifiers properly.Mostly use public static to ease of use.
    
    2. While getting inputs from the console, check for invalid inputs and cover that edge case.
    3. Don't complicate your design, Keep your design as simple as possible.
        Try to have more logic its relevant class, Don't try to use so many classes and complicate the system.
    4. Understand your application's need and choose the data structure, you can either choose LIST, MAP, SET, HEAP
        depending on your needs. First be clear with what data structure you want to use.
    5. Use IDE's Generate setter and getter methods.
    6. Reduce getting choices from user as much as possible because, you have to write display function to that,
        you have to validate the choices, if the choice is not valid, then you have to again get the choices from
        the use. This is an over head when it comes to the machine coding rounds. Ge only the mandatory choices from
        the user.
    7. Keep the collections data structures as minimum as possible because, you have to add and remove elements
        accordingly, This is an over head.
    8. Avoid pre-populating values, because you have to write a separate logic for it,
        This might cause some ambiguity
    9. Create classes as minimum as possible, because less classes means less objects to maintain them. Try to dump
        the service related to that class in the same class, or declare a separate class for that service and declare
        all the method as static. Try not to use Associated objects ( an object inside an object, if you can represent a data
        without defining a class for it, then go for it, too much of objects only complicate things ).
    10. Install inteli-j ide in your laptop.
    11. Create a folder called repository and store all the DataStructures there and make them static, Import them
        into your current file, then you can use them without specifying the class name in which it is defined.
        You can initially define the data structures in their specific classes, once your application is completely
        working then you can move them into the general repository and then import them into your current class.
    12. Keep the main method running the application as simple as possible, use only one boolean value to run the loop,
        don't complicate the process by having multiple boolean values ( some may execute for the first time or
        depending on any other conditions.
    13. Use switch case statements for toggling between the options.
    14. Be very clear with when an action will happen and when an action will not happen & have a clear understanding
        about the flow of the programme ( for example, If you want to book a ticket in a train, first the seats should
        be available, if not, then you have to check in the cancelled list,
        If there exist a seat with same preference, then you can book the seat, or else, then you should notify like, the
        preferred seats are not available ).


-----------------------------------------------------------------------------------------------------------------------
How to improve your machine coding skills :

1. DON'T PANIC :
    Even if you are presented with unknow or unfamiliar problem, don't panic. Panicking is the worst thing
    you can possibly imagine and do. There is no rule that you have to know everything in this world. "katradhu kayyalavu,
    Kalladhadhu ulagalavu". Get familiar with this situation. Even when you are presented with problem, that you are not
    familiar, stay calm, understand the question, and then proceed and believe you can finish it.

1. WHAT IT IS :
    First answer what it is by understand  the complete code flow, when an action happens and when an actions don't
    happen. Clearly visualize the flow of the programme.
2. HOW YOU ARE GOING TO ACHIEVE THIS :
    Get a clarity about how you are going to achieve this flow but remember, you should not complicate this flow by
    introducing more classes, more objects. Keep them simple, follow the kiss principle.
2. FOCUS ON FUNCTIONALITY RATHER THAN ON AESTHETICS :
    First focus on completing the flow of the function, Try to follow the design principles and other SOLID principles,
    If you achieve this without complicating your system. If it complicates the system, then first try to build your
    app, then to the interviewer, say we can improve this by doing this and that.


-------------------------------------------------------------------------------------------------------------------------
EXPECTATIONS FORM A MACHINE CODING ROUNDS :

    1. Code should be working and demonstrable.
    2. Code should be functionally correct.
    3. Code should be modular and readable.
    4. Separation of concerns should be addressed.
    5. Code should easily accommodate new requirements with minimal changes.
    6. There should be a main method from where the code could be easily testable.
    7. A UI is generally not required.